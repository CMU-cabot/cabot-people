ARG FROM_IMAGE

FROM $FROM_IMAGE AS build
ARG ROS_DISTRO=melodic \
	UBUNTU_DISTRO=bionic \
ENV ROS_DISTRO=$ROS_DISTRO
ARG TZ="Etc/UTC"
ENV TZ=$TZ
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
ENV LANG=en_US.UTF-8

RUN apt update && \
        apt install -y --no-install-recommends \
        jq \
        && \
        apt clean && \
        rm -rf /var/lib/apt/lists/*

COPY requirements.txt /
RUN pip3 install --no-cache-dir \
        -r /requirements.txt

# install TensorRT packages
RUN apt update && \
        apt-get install -y --no-install-recommends \
        libnvinfer-dev \
        libnvinfer-plugin-dev \
        libnvinfer-plugin8 \
        libnvinfer8 \
        libnvonnxparsers8 \ 
        libnvparsers8 \
        python3-libnvinfer \
        && \
        apt clean && \
        rm -rf /var/lib/apt/lists/*

# install mmdeploy requirements
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}

RUN apt update && \
        apt-get install -y --no-install-recommends \
        cuda-nvml-dev-11-4 \
        cuda-nvrtc-dev-11-4 \
        cuda-nvtx-11-4 \
        cuda-profiler-api-11-4 \
        libcublas-dev-11-4 \
        libcudla-dev-11-4 \
        libcufft-dev-11-4 \
        libcurand-dev-11-4 \
        libcusolver-dev-11-4 \
        libcusparse-dev-11-4 \
        libopenblas-dev \
        libopenmpi-dev \
        && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*

# install for torch, torchvision
RUN pip3 install --no-cache-dir typing-extensions==4.8.0

# install pytorch by setting USE_DISTRIBUTED option to use torch.distributed package for mmdeploy
# https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048
RUN git clone --recursive --branch v2.1.1 http://github.com/pytorch/pytorch && \
        cd pytorch && \
        pip3 install --no-cache-dir -r requirements.txt && \
        pip3 install --no-cache-dir scikit-build && \
        pip3 install --no-cache-dir ninja && \
        USE_NCCL=0 USE_DISTRIBUTED=1 USE_QNNPACK=0 USE_PYTORCH_QNNPACK=0 USE_NATIVE_ARCH=1 TORCH_CUDA_ARCH_LIST="7.2;8.7" PYTORCH_BUILD_VERSION=2.1.1 PYTORCH_BUILD_NUMBER=1 \
	python3 setup.py bdist_wheel -d /tmp/wheelhouse && \
	pip3 install /tmp/wheelhouse/torch-*.whl && \
	rm -rf /tmp/wheelhouse && \
        cd ../ && \
        rm -rf pytorch

# install torchvision
RUN git clone --branch v0.16.1 https://github.com/pytorch/vision torchvision && \
        cd torchvision && \
        FORCE_CUDA=1 TORCH_CUDA_ARCH_LIST="7.2;8.7" BUILD_VERSION=0.16.1 python3 setup.py bdist_wheel -d /tmp/wheelhouse && \
	pip3 install /tmp/wheelhouse/torchvision-*.whl && \
	rm -rf /tmp/wheelhouse && \
        cd ../ && \
        rm -rf torchvision

# install mmdeploy requirements
RUN pip3 install --no-cache-dir openmim==0.3.9 && \
        # install all requirements for mmengine except opencv-python
        pip3 install --no-cache-dir addict termcolor pyyaml matplotlib yapf numpy rich && \
        # install mmengine withtout opencv-python to use opencv-python built from source
 	pip3 install --no-cache-dir --no-deps mmengine==0.10.3 && \
        # upgrade pip to install pycuda
        pip3 install --no-cache-dir pip==23.3.1 && \
        # upgrade setuptools to install grpcio
        pip3 install --no-cache-dir setuptools==69.0.2 && \
        # install specific version for mmdeploy
        pip3 install --no-cache-dir grpcio==1.59.3 && \
        # install psutil, ninja for fast build of python packages
        pip3 install --no-cache-dir psutil==5.9.6 ninja==1.11.1.1 && \
        # install pycuda for mmdeploy
        pip3 install --no-cache-dir pycuda==2023.1

RUN git clone --branch v2.1.0 https://github.com/open-mmlab/mmcv.git && \
        cd mmcv && \
        MMCV_WITH_OPS=1 python3 setup.py bdist_wheel -d /tmp/wheelhouse && \
        # install all requirements for mmcv except opencv-python, mmengine
        pip3 install --no-cache-dir addict numpy packaging Pillow pyyaml yapf matplotlib rich termcolor "importlib-metadata>=6.6.0" "platformdirs>=3.5.1" \
                "tomli>=2.0.1" "zipp>=0.5" "contourpy>=1.0.1" "cycler>=0.10" "fonttools>=4.22.0" "kiwisolver>=1.0.1" "pyparsing>=2.2.1" \
                "python-dateutil>=2.7" "markdown-it-py>=2.2.0" "pygments<3.0.0,>=2.13.0" "typing-extensions<5.0,>=4.0.0" "mdurl~=0.1" "six>=1.5" && \
        # install mmcv withtout opencv-python to use opencv-python built from source
	pip3 install --no-deps /tmp/wheelhouse/mmcv-*.whl && \
	rm -rf /tmp/wheelhouse && \
        cd ../ && \
        rm -rf mmcv

# install spdlog to build mmdeploy
RUN apt update && \
        apt-get install -y --no-install-recommends \
        libspdlog1 \
        libspdlog-dev \
        && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*

# workaround to to find TensorRT directory when running mmdeploy
# https://github.com/open-mmlab/mmdeploy/issues/2514
ENV TENSORRT_DIR=/usr/include/aarch64-linux-gnu

# install ppl.cv
RUN cd /opt && \
        # use ppl.cv version which supports Jetson Orin
        # https://github.com/openppl-public/ppl.cv/commit/a2b386a
	# git clone -b v0.7.0 https://github.com/openppl-public/ppl.cv.git && \
        git clone https://github.com/openppl-public/ppl.cv.git && \
	cd ppl.cv && \
        git checkout a2b386a && \
	./build.sh cuda && \
# install mmdeploy model converter
        cd /opt && \
        git clone -b v1.3.1 https://github.com/open-mmlab/mmdeploy.git --recursive && \
        cd mmdeploy && \
        mkdir build && cd build && \
        cmake .. \
	-DCMAKE_INSTALL_PREFIX=/usr/local \
        -DTENSORRT_DIR=${TENSORRT_DIR}\
        -DMMDEPLOY_TARGET_BACKENDS="trt" && \
        make -j$(nproc) && make install && \
        cd ../ && \
        python3 setup.py bdist_wheel -d /tmp/wheelhouse && \
        # install all requirements for mmdeploy except opencv-python, mmengine
        pip3 install --no-cache-dir aenum grpcio matplotlib multiprocess numpy "onnx>=1.13.0" prettytable "protobuf<=3.20.2" six terminaltables \
                "contourpy>=1.0.1" "cycler>=0.10" "fonttools>=4.22.0" "kiwisolver>=1.0.1" "packaging>=20.0" "pillow>=6.2.0" "pyparsing>=2.2.1" \
                "python-dateutil>=2.7" addict pyyaml rich termcolor yapf "dill>=0.3.7" wcwidth "markdown-it-py>=2.2.0" "pygments<3.0.0,>=2.13.0" \
                "typing-extensions<5.0,>=4.0.0" "importlib-metadata>=6.6.0" "platformdirs>=3.5.1" "tomli>=2.0.1" "zipp>=0.5" "mdurl~=0.1" && \
        # install mmdeploy withtout opencv-python to use opencv-python built from source
	pip3 install --no-deps /tmp/wheelhouse/mmdeploy-*.whl && \
	rm -rf /tmp/wheelhouse && \
        rm -rf build && \
# install mmdeploy SDK
        mkdir build && cd build && \
        cmake .. \
	-DCMAKE_INSTALL_PREFIX=/usr/local \
        -DMMDEPLOY_BUILD_SDK=ON \
        -DMMDEPLOY_BUILD_EXAMPLES=ON \
        -DCMAKE_CXX_COMPILER=g++ \
        -Dpplcv_DIR=/opt/ppl.cv/cuda-build/install/lib/cmake/ppl \
        -DTENSORRT_DIR=${TENSORRT_DIR} \
        -DMMDEPLOY_BUILD_SDK_MONOLITHIC=ON \
        -DMMDEPLOY_BUILD_SDK_PYTHON_API=ON \
        -DMMDEPLOY_TARGET_DEVICES="cuda;cpu" \
        -DMMDEPLOY_TARGET_BACKENDS="trt" \
        -DMMDEPLOY_CODEBASES="mmdet" && \
        make -j$(nproc) && make install && \
# copy mmdeploy_runtime library manually to use mmdeploy_runtime python package
	mkdir -p /opt/mmdeploy_runtime/lib && \
	cp lib/mmdeploy_runtime*.so /opt/mmdeploy_runtime/lib/ && \
	cd ../../ && \
	rm -rf ppl.cv mmdeploy

# install mmdetection
RUN cd /opt && \
	git clone -b v3.3.0 https://github.com/open-mmlab/mmdetection.git && \
	cd mmdetection && \
	python3 setup.py bdist_wheel -d /tmp/wheelhouse && \
	pip3 install /tmp/wheelhouse/mmdet-*.whl && \
	rm -rf /tmp/wheelhouse && \
        cd ../ && \
        rm -rf mmdetection

# copy mmdeploy_runtime library manually to use mmdeploy_runtime python package
ENV PYTHONPATH=/opt/mmdeploy_runtime/lib:$PYTHONPATH

# clone mmdeploy, mmdetection repository which is used when deploying models
RUN cd /opt && \
        git clone -b v1.3.1 https://github.com/open-mmlab/mmdeploy.git --recursive && \
        cd mmdeploy && \
        cd /opt && \
	git clone -b v3.3.0 https://github.com/open-mmlab/mmdetection.git

COPY ./launch.sh ./resetusb.sh ./resetrs.sh /

# debug
# RUN apt update && apt-get install -y --no-install-recommends gdb

# setup for display
ENV USERNAME developer

### replace 1000 with your user/group id
ARG UID=1000
RUN useradd -m $USERNAME && \
        echo "$USERNAME:$USERNAME" | chpasswd && \
        usermod --shell /bin/bash $USERNAME && \
	usermod -aG sudo $USERNAME && \
        mkdir -p /etc/sudoers.d/ && \
        echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME && \
        chmod 0440 /etc/sudoers.d/$USERNAME && \
        usermod  --uid $UID $USERNAME && \
        groupmod --gid $UID $USERNAME
# on jetson, add user to video group to use CUDA
RUN usermod -aG video $USERNAME

USER $USERNAME

ENV HOME /home/$USERNAME
RUN mkdir -p $HOME/people_ws/src
WORKDIR $HOME/people_ws

# avoid error
# ENV LD_PRELOAD /usr/local/lib/libOpen3D.so
